
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=Ainst);
    Not(in=Ainst,out=Cinst);

    Mux16(a=instruction, b=ALUout, sel=Cinst, out=ARegBefore);
    And(a=instruction[5], b=Cinst, out=d1); // instruction[5] = d1 if it's a C instruction
    Or(a=d1, b=Ainst, out=storeAReg);
    ARegister(in=ARegBefore, load=storeAReg, out=A, out[0..14]=addressM);

    Mux16(a=A, b=inM, sel=instruction[12], out=MOrA); // instruction[12] = a

    And(a=instruction[4], b=Cinst, out=d2); // instruction[4] = d2 if it's a C instruction
    DRegister(in=ALUout, load=d2, out=D);

    ALU(x=D, y=MOrA, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng
    );

    And(a=instruction[3], b=Cinst, out=writeM); // instruction[2] = d3 if it's a C instruction

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=pos);
    And(a=instruction[2], b=ng, out=jneg);
    And(a=instruction[1], b=zr, out=jzer);
    And(a=instruction[0], b=pos, out=jpos);
    Or(a=jneg, b=jzer, out=jzerneg);
    Or(a=jzerneg, b=jpos, out=jumpIfCinst);
    And(a=jumpIfCinst, b=Cinst, out=jump);

    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
